#include <quickgui/mem.hpp>
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

template<class Range, class I=typename Range::value_type>
void test_irange(Range rng, std::vector<I> const& expected)
{
    INFO("first=" << rng.first << "  last=" << rng.last);
    SUBCASE("original")
    {
        std::vector<I> values;
        for(I val : rng)
        {
            values.push_back(val);
        }
        REQUIRE(values.size() == expected.size());
        size_t pos = 0;
        for(I val : values)
        {
            INFO("pos=" << pos);
            CHECK(val == expected[pos]);
            ++pos;
        }
    }
}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

TEST_CASE("irange.plain")
{
    #define _(rngargs, ...) SUBCASE(#rngargs) { test_irange(quickgui::irange rngargs, __VA_ARGS__); }
    _((   0   ),   {});
    _((0, 0   ),   {});
    _((0, 0, 1),   {});
    _((0, 0, 2),   {});
    //
    _((   1   ),   {0});
    _((0, 1   ),   {0});
    _((0, 1, 1),   {0});
    _((0, 1, 2),   {0});
    _((0, 1, 3),   {0});
    //
    _((   2   ),   {0, 1});
    _((0, 2   ),   {0, 1});
    _((0, 2, 1),   {0, 1});
    _((0, 2, 2),   {0});
    _((0, 2, 3),   {0});
    //
    _((   3   ),   {0, 1, 2});
    _((0, 3   ),   {0, 1, 2});
    _((0, 3, 1),   {0, 1, 2});
    _((0, 3, 2),   {0, 2});
    _((0, 3, 3),   {0});
    _((0, 3, 4),   {0});
    //
    _((   4   ),   {0, 1, 2, 3});
    _((0, 4   ),   {0, 1, 2, 3});
    _((0, 4, 1),   {0, 1, 2, 3});
    _((0, 4, 2),   {0, 2});
    _((0, 4, 3),   {0, 3});
    _((0, 4, 4),   {0});
    //
    _((   5   ),   {0, 1, 2, 3, 4});
    _((0, 5   ),   {0, 1, 2, 3, 4});
    _((0, 5, 1),   {0, 1, 2, 3, 4});
    _((0, 5, 2),   {0, 2, 4});
    _((0, 5, 3),   {0, 3});
    _((0, 5, 4),   {0, 4});
    _((0, 5, 5),   {0});
    //
    _((   6   ),   {0, 1, 2, 3, 4, 5});
    _((0, 6   ),   {0, 1, 2, 3, 4, 5});
    _((0, 6, 1),   {0, 1, 2, 3, 4, 5});
    _((0, 6, 2),   {0, 2, 4});
    _((0, 6, 3),   {0, 3});
    _((0, 6, 4),   {0, 4});
    _((0, 6, 5),   {0, 5});
    _((0, 6, 6),   {0});
    //
    _((   7   ),   {0, 1, 2, 3, 4, 5, 6});
    _((0, 7   ),   {0, 1, 2, 3, 4, 5, 6});
    _((0, 7, 1),   {0, 1, 2, 3, 4, 5, 6});
    _((0, 7, 2),   {0, 2, 4, 6});
    _((0, 7, 3),   {0, 3, 6});
    _((0, 7, 4),   {0, 4});
    _((0, 7, 5),   {0, 5});
    _((0, 7, 6),   {0, 6});
    _((0, 7, 7),   {0});
    //
    _((   8   ),   {0, 1, 2, 3, 4, 5, 6, 7});
    _((0, 8   ),   {0, 1, 2, 3, 4, 5, 6, 7});
    _((0, 8, 1),   {0, 1, 2, 3, 4, 5, 6, 7});
    _((0, 8, 2),   {0, 2, 4, 6});
    _((0, 8, 3),   {0, 3, 6});
    _((0, 8, 4),   {0, 4});
    _((0, 8, 5),   {0, 5});
    _((0, 8, 6),   {0, 6});
    _((0, 8, 7),   {0, 7});
    _((0, 8, 8),   {0});
    //
    _((   9   ),   {0, 1, 2, 3, 4, 5, 6, 7, 8});
    _((0, 9   ),   {0, 1, 2, 3, 4, 5, 6, 7, 8});
    _((0, 9, 1),   {0, 1, 2, 3, 4, 5, 6, 7, 8});
    _((0, 9, 2),   {0, 2, 4, 6, 8});
    _((0, 9, 3),   {0, 3, 6});
    _((0, 9, 4),   {0, 4, 8});
    _((0, 9, 5),   {0, 5});
    _((0, 9, 6),   {0, 6});
    _((0, 9, 7),   {0, 7});
    _((0, 9, 8),   {0, 8});
    _((0, 9, 9),   {0});
    //
    _((   10    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
    _((0, 10    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
    _((0, 10,  1), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
    _((0, 10,  2), {0, 2, 4, 6, 8});
    _((0, 10,  3), {0, 3, 6, 9});
    _((0, 10,  4), {0, 4, 8});
    _((0, 10,  5), {0, 5});
    _((0, 10,  6), {0, 6});
    _((0, 10,  7), {0, 7});
    _((0, 10,  8), {0, 8});
    _((0, 10,  9), {0, 9});
    _((0, 10, 10), {0});
    //
    _((   12    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11});
    _((0, 12    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11});
    _((0, 12,  1), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11});
    _((0, 12,  2), {0, 2, 4, 6, 8, 10});
    _((0, 12,  3), {0, 3, 6, 9});
    _((0, 12,  4), {0, 4, 8});
    _((0, 12,  5), {0, 5, 10});
    _((0, 12,  6), {0, 6});
    _((0, 12,  7), {0, 7});
    _((0, 12,  8), {0, 8});
    _((0, 12,  9), {0, 9});
    _((0, 12, 10), {0, 10});
    _((0, 12, 11), {0, 11});
    _((0, 12, 12), {0});
    //
    _((   24    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23});
    _((0, 24    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23});
    _((0, 24,  1), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23});
    _((0, 24,  2), {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22});
    _((0, 24,  3), {0, 3, 6, 9, 12, 15, 18, 21});
    _((0, 24,  4), {0, 4, 8, 12, 16, 20});
    _((0, 24,  5), {0, 5, 10, 15, 20});
    _((0, 24,  6), {0, 6, 12, 18});
    _((0, 24,  7), {0, 7, 14, 21});
    _((0, 24,  8), {0, 8, 16});
    _((0, 24,  9), {0, 9, 18});
    _((0, 24, 10), {0, 10, 20});
    _((0, 24, 11), {0, 11, 22});
    _((0, 24, 12), {0, 12});
    _((0, 24, 13), {0, 13});
    _((0, 24, 14), {0, 14});
    _((0, 24, 15), {0, 15});
    _((0, 24, 20), {0, 20});
    _((0, 24, 23), {0, 23});
    _((0, 24, 24), {0});
    //
    _((   50    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49});
    _((0, 50    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49});
    _((0, 50,  1), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49});
    _((0, 50,  2), {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48});
    _((0, 50,  3), {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48});
    _((0, 50,  4), {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48});
    _((0, 50,  5), {0, 5, 10, 15, 20, 25, 30, 35, 40, 45});
    _((0, 50,  6), {0, 6, 12, 18, 24, 30, 36, 42, 48});
    _((0, 50,  7), {0, 7, 14, 21, 28, 35, 42, 49});
    _((0, 50,  8), {0, 8, 16, 24, 32, 40, 48});
    _((0, 50,  9), {0, 9, 18, 27, 36, 45});
    _((0, 50, 10), {0, 10, 20, 30, 40});
    _((0, 50, 11), {0, 11, 22, 33, 44});
    _((0, 50, 12), {0, 12, 24, 36, 48});
    _((0, 50, 13), {0, 13, 26, 39});
    _((0, 50, 14), {0, 14, 28, 42});
    _((0, 50, 15), {0, 15, 30, 45});
    _((0, 50, 20), {0, 20, 40});
    _((0, 50, 23), {0, 23, 46});
    _((0, 50, 49), {0, 49});
    _((0, 50, 50), {0});
    //
    _((   51    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50});
    _((0, 51    ), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50});
    _((0, 51,  1), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50});
    _((0, 51,  2), {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50});
    _((0, 51,  3), {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48});
    _((0, 51,  4), {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48});
    _((0, 51,  5), {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50});
    _((0, 51,  6), {0, 6, 12, 18, 24, 30, 36, 42, 48});
    _((0, 51,  7), {0, 7, 14, 21, 28, 35, 42, 49});
    _((0, 51,  8), {0, 8, 16, 24, 32, 40, 48});
    _((0, 51,  9), {0, 9, 18, 27, 36, 45});
    _((0, 51, 10), {0, 10, 20, 30, 40, 50});
    _((0, 51, 11), {0, 11, 22, 33, 44});
    _((0, 51, 12), {0, 12, 24, 36, 48});
    _((0, 51, 13), {0, 13, 26, 39});
    _((0, 51, 14), {0, 14, 28, 42});
    _((0, 51, 15), {0, 15, 30, 45});
    _((0, 51, 20), {0, 20, 40});
    _((0, 51, 23), {0, 23, 46});
    _((0, 51, 49), {0, 49});
    _((0, 51, 50), {0, 50});
    _((0, 51, 51), {0});
}
